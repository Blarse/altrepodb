#!/usr/bin/python3

import argparse
import configparser
import json
import logging
import pika
import signal
import ssl
import sys
import systemd.daemon
import telebot
import time

from pika import exceptions as pika_exceptions
from dataclasses import dataclass
from datetime import datetime


VERSION = "1.0"


@dataclass
class AMQPConfig:
    host: str = "localhost"
    port: int = 5672
    vhost: str = "/"
    queue: str = "default"
    queue_type: str = "classic"
    exchange: str = "amq.topic"
    username: str = "guest"
    password: str = "guest"
    cacert: str = ""
    key: str = ""
    cert: str = ""
    prefetch_count: int = 10


logger = logging.getLogger("altrepobot")
connection = None
channel = None


def shutdown(signum, frame):
    logger.info("Shutting down AMQP Client")
    systemd.daemon.notify("STOPPING=1")

    if channel:
        channel.stop_consuming()

    if connection:
        connection.close()

    raise SystemExit(0)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-c", "--config", type=str, help="Path to configuration file", required=True
    )
    parser.add_argument(
        "-D", "--debug", action="store_true", help="Set logging level to debug"
    )
    args = parser.parse_args()

    args.amqpconf = AMQPConfig()

    if args.config is not None:
        cfg = configparser.ConfigParser()
        try:
            with open(args.config) as f:
                cfg.read_file(f)
        except FileNotFoundError as error:
            print(
                f"Could not open config '{error.filename}': {error.strerror}",
                file=sys.stderr,
            )
            sys.exit(error.errno)

        if cfg.has_section("TELEGRAM"):
            section_tg = cfg["TELEGRAM"]
            args.tg_token = section_tg.get("token")
            args.tg_chatid = section_tg.get("chatid")

        if cfg.has_section("AMQP"):
            section_amqp = cfg["AMQP"]
            args.amqpconf.host = section_amqp.get("host", args.amqpconf.host)
            args.amqpconf.port = int(section_amqp.get("port") or args.amqpconf.port)
            args.amqpconf.vhost = section_amqp.get("vhost", args.amqpconf.vhost)
            args.amqpconf.queue = section_amqp.get("queue", args.amqpconf.queue)
            args.amqpconf.queue_type = section_amqp.get(
                "queue_type", args.amqpconf.queue_type
            )
            args.amqpconf.exchange = section_amqp.get(
                "exchange", args.amqpconf.exchange
            )
            args.amqpconf.username = section_amqp.get(
                "username", args.amqpconf.username
            )
            args.amqpconf.password = section_amqp.get(
                "password", args.amqpconf.password
            )
            args.amqpconf.cacert = section_amqp.get("cacert", args.amqpconf.cacert)

    return args


def format_message(body_json):
    try:
        body = json.loads(body_json)

        # try to format payload
        try:
            payload = json.dumps(
                json.loads(
                    body["payload"].lstrip(r"b\'").rstrip(r"\'").replace(r"\n", " ")
                ),
                indent=4,
            )
        except Exception:
            payload = body["payload"].decode("utf8")

        message = (
            "{date}\n[{severity}] {type} in <b>{subject}</b>\n\n"
            "{message}\n\npayload:\n<pre>{payload}</pre>"
        ).format(
            date=datetime.fromtimestamp(body["timestamp"]),
            severity=body["severity"],
            type=body["type"],
            subject=body["subject"],
            message=body["message"],
            payload=payload,
        )
    except (KeyError, TypeError) as error:
        logger.error(f"Inconsistent json message: {error}")
        message = (
            "Inconsistent json message, sending raw:\n\n"
            f"<pre>{body_json.decode('utf8')}</pre>"
        )
    except json.JSONDecodeError as error:
        logger.error(f"Failed to decode json message: {error}")
        message = (
            f"Failed to decode json message, sending raw:\n\n"
            f"<pre>{body_json.decode('utf8')}</pre>"
        )

    return message


def on_amqp_message(args, channel, method, properties, body_json, bot):
    logger.debug(f"New message: {body_json.decode('utf-8')}")

    message = format_message(body_json)
    bot.send_message(args.tg_chatid, message)

    channel.basic_ack(method.delivery_tag)

    # Note(egori): telegram API does not allow sending more than 20 messages per minute to the same channel
    time.sleep(3)


def amqp_connect(args):
    credentials = pika.PlainCredentials(
        args.amqpconf.username,
        args.amqpconf.password,
    )

    ssl_options = None

    if args.amqpconf.cacert:
        context = ssl.create_default_context(cafile=args.amqpconf.cacert)
        if args.amqpconf.key and args.amqpconf.cert:
            context.load_cert_chain(args.amqpconf.cert, args.amqpconf.key)
        ssl_options = pika.SSLOptions(context)

    parameters = pika.ConnectionParameters(
        host=args.amqpconf.host,
        port=args.amqpconf.port,
        virtual_host=args.amqpconf.vhost,
        credentials=credentials,
        ssl_options=ssl_options,
        heartbeat=0,
        client_properties={
            "product": "ALTRepoDB",
            "information": "ALTRepo Notifier Telegram Bot",
            "version": VERSION,
        },
    )

    return pika.BlockingConnection(parameters)


def main():
    global connection, channel

    _handler = logging.StreamHandler()
    _formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    _handler.setFormatter(_formatter)
    logger.addHandler(_handler)

    signal.signal(signal.SIGTERM, shutdown)

    args = get_args()
    if args.debug:
        logger.setLevel("DEBUG")

    bot = telebot.TeleBot(args.tg_token, parse_mode="HTML")

    try:
        connection = amqp_connect(args)
        logger.debug(
            f"Connected to RabbitMQ ({args.amqpconf.host}:{args.amqpconf.port})"
        )
        channel = connection.channel()

        channel.queue_declare(
            queue=args.amqpconf.queue,
            durable=True,
            exclusive=False,
            auto_delete=False,
            arguments={"x-queue-type": args.amqpconf.queue_type},
        )
        channel.queue_bind(args.amqpconf.queue, args.amqpconf.exchange, "#")

        channel.basic_consume(
            args.amqpconf.queue,
            lambda channel, method, properties, body_json: on_amqp_message(
                args, channel, method, properties, body_json, bot
            ),
        )
        logger.debug(f"Start consuming messages from '{args.amqpconf.queue}'")
        systemd.daemon.notify("READY=1")
        channel.start_consuming()
    except pika_exceptions.AMQPError as error:
        logger.error(f"AMQP error ocurred: {error}")
        sys.exit(1)
    except KeyboardInterrupt:
        logger.error("Interrupted")
        pass

    shutdown(0, None)


if __name__ == "__main__":
    main()
