#!/usr/bin/python3

# This file is part of the ALTRepo Uploader distribution (http://git.altlinux.org/people/dshein/public/altrepodb.git).
# Copyright (c) 2021-2022 BaseALT Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import sys
import csv
import argparse
import datetime
import requests
import configparser
from logging import Logger
from collections import namedtuple

from altrepodb.utils import cvt_datetime_local_to_utc, set_datetime_timezone_to_utc
from altrepodb.logger import get_config_logger, LoggerLevel
from altrepodb.database import DatabaseClient, DatabaseConfig

NAME = "bugzilla"
BUGZILLA_URL = "https://bugzilla.altlinux.org/buglist.cgi"
BUGZILLA_URL_PARAMS = {
    "limit": 0,
    "query_format": "advanced",
    "ctype": "csv",
    "human": 1,
    "columnlist": (
        "id,bug_status,resolution,bug_severity,priority,product,version,"
        "rep_platform,component,assigned_to,reporter,short_desc,changeddate"
    ),
}


BugzillaRecord = namedtuple(
    "BugzillaRecord",
    (
        "bz_id",
        "bz_status",
        "bz_resolution",
        "bz_severity",
        "bz_priority",
        "bz_product",
        "bz_version",
        "bz_platform",
        "bz_component",
        "bz_assignee",
        "bz_reporter",
        "bz_summary",
        "bz_last_changed",
    ),
)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", type=str, help="Path to configuration file")
    parser.add_argument("-d", "--dbname", type=str, help="Database name")
    parser.add_argument("-s", "--host", type=str, help="Database host")
    parser.add_argument("-p", "--port", type=str, help="Database password")
    parser.add_argument("-u", "--user", type=str, help="Database login")
    parser.add_argument("-P", "--password", type=str, help="Database password")
    parser.add_argument(
        "-D", "--debug", action="store_true", help="Set logging level to debug"
    )
    args = parser.parse_args()

    if args.config is not None:
        cfg = configparser.ConfigParser()
        with open(args.config) as f:
            cfg.read_file(f)
        if cfg.has_section("DATABASE"):
            section_db = cfg["DATABASE"]
            args.dbname = args.dbname or section_db.get("dbname", "default")
            args.host = args.host or section_db.get("host", "localhost")
            args.port = args.port or section_db.get("port", None)
            args.user = args.user or section_db.get("user", "default")
            args.password = args.password or section_db.get("password", "")
    else:
        args.dbname = args.dbname or "default"
        args.host = args.host or "localhost"
        args.port = args.port or None
        args.user = args.user or "default"
        args.password = args.password or ""

    return args


def load(conn: DatabaseClient, logger: Logger) -> None:
    # get bugs CSV from Bugzilla
    logger.info(f"Fetching Bugzilla data from {BUGZILLA_URL}...")
    response = requests.get(BUGZILLA_URL, params=BUGZILLA_URL_PARAMS)
    logger.info(f"URL request elapsed {response.elapsed.total_seconds():.3f}")

    bz_from_url: dict[int, BugzillaRecord] = {}
    bz_from_db: dict[int, BugzillaRecord] = {}
    bz_diff: dict[int, BugzillaRecord] = {}

    if response.status_code != 200:
        raise RuntimeError(f"Failed to fetch data from Bugzilla at {BUGZILLA_URL}")

    contents = csv.reader(response.text.splitlines())
    _ = next(contents, [])  # skip CSV headers
    for line in contents:
        bz_record = BugzillaRecord(int(line[0]), *line[1:])
        # remove empty 'resolution' field placeholder
        if bz_record.bz_resolution == " ---":
            bz_record = bz_record._replace(bz_resolution="")
        # convert datetime
        bz_record = bz_record._replace(
            bz_last_changed=cvt_datetime_local_to_utc(
                datetime.datetime.strptime(
                    bz_record.bz_last_changed, "%Y-%m-%d %H:%M:%S"
                )
            )
        )
        bz_from_url[bz_record.bz_id] = bz_record

    logger.info(f"Found {len(bz_from_url)} bug records")
    #  read latest data from DB
    logger.info("Fetching last Bugzilla data from database...")

    # playing around with SQL request arguments
    _fields = list(BugzillaRecord._fields)
    _fields.remove("bz_id")
    _fields[_fields.index("bz_last_changed")] = "toDateTime(bz_last_changed, 'UTC')"

    sql_res = conn.execute(
        f"""
SELECT
    bz_id,
    argMax(
        tuple({','.join(_fields)}),
        ts
    )
FROM Bugzilla
GROUP BY bz_id"""
    )

    logger.info(f"SQL request elapsed {conn.last_query_elapsed:.3f} seconds")

    bz_from_db = {int(el[0]): BugzillaRecord(int(el[0]), *el[1]) for el in sql_res}
    # fix datetime timezone issues
    for k, v in bz_from_db.items():
        bz_record = v._replace(
            bz_last_changed=set_datetime_timezone_to_utc(v.bz_last_changed)
        )
        bz_from_db[k] = bz_record

    logger.info(f"Found {len(bz_from_db)} bug records")

    # find updated bugs
    for k, v in bz_from_url.items():
        if k not in bz_from_db or v != bz_from_db[k]:
            bz_diff[k] = v
    if not bz_diff:
        logger.info("No bug updates found. Exiting...")
    else:
        logger.info(f"{len(bz_diff)} records updated. Saving to database...")
        # store updated bugs to database
        sql_res = conn.execute(
            f"INSERT INTO Bugzilla ({','.join(BugzillaRecord._fields)}) VALUES",
            (v._asdict() for v in bz_diff.values()),
        )

        logger.info(f"SQL request elapsed {conn.last_query_elapsed:.3f} seconds")
        logger.debug(f"Inserted {sql_res} rows to 'Bugzilla' table")


def main():
    assert sys.version_info >= (3, 7), "Pyhton version 3.7 or newer is required!"
    args = get_args()
    logger = get_config_logger(
        NAME,
        tag="load",
        config=args.config,
    )
    if args.debug:
        logger.setLevel(LoggerLevel.DEBUG)
    logger.debug(f"Run with args: {args}")
    conn = None
    try:
        conn = DatabaseClient(
            config=DatabaseConfig(
                host=args.host,
                port=args.port,
                dbname=args.dbname,
                user=args.user,
                password=args.password,
            ),
            logger=logger,
        )
        load(conn, logger)
    except Exception as error:
        logger.error(
            f"Error occurred during Bugzilla information loading: {error}",
            exc_info=True,
        )
        sys.exit(1)
    finally:
        if conn is not None:
            conn.disconnect()


if __name__ == "__main__":
    main()
